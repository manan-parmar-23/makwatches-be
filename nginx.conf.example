# Nginx Configuration for MakWatches Backend API
# This configuration sets up a reverse proxy for the Go backend
# with SSL/TLS support using Let's Encrypt

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;

# Upstream backend server
upstream makwatches_backend {
    server localhost:8080 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# HTTP server - redirect to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name api.yourdomain.com;

    # Let's Encrypt challenge
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/letsencrypt;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.yourdomain.com;

    # SSL certificates (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/api.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.yourdomain.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/api.yourdomain.com/chain.pem;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # CORS headers (if TLS terminates here and app doesn't set CORS)
    # Use $http_origin to echo back validated origins via map if needed
    # add_header Access-Control-Allow-Origin "https://makwatches.in" always;
    # add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    # add_header Access-Control-Allow-Headers "Origin, Authorization, Content-Type, X-Requested-With" always;
    # add_header Access-Control-Allow-Credentials "true" always;

    # Logging
    access_log /var/log/nginx/makwatches-api-access.log;
    error_log /var/log/nginx/makwatches-api-error.log warn;

    # Max body size for file uploads
    client_max_body_size 10M;

    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Root location - proxy to backend
    location / {
        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;

        # Proxy settings
        proxy_pass http://makwatches_backend;
        proxy_http_version 1.1;

        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # WebSocket support (if needed)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Disable buffering for streaming responses
        proxy_buffering off;

        # Keep-alive
        proxy_set_header Connection "";

        # Optional: short-circuit preflight if handling CORS at Nginx
        # if ($request_method = OPTIONS) {
        #     add_header Access-Control-Allow-Origin "https://makwatches.in" always;
        #     add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
        #     add_header Access-Control-Allow-Headers "Origin, Authorization, Content-Type, X-Requested-With" always;
        #     add_header Access-Control-Allow-Credentials "true" always;
        #     return 204;
        # }
    }

    # Authentication endpoints - stricter rate limiting
    location ~ ^/auth/(login|register) {
        limit_req zone=auth_limit burst=5 nodelay;

        proxy_pass http://makwatches_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
    }

    # Health check endpoint - no rate limiting
    location /health {
        access_log off;
        proxy_pass http://makwatches_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Connection "";
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# Additional configuration for multiple domains (if needed)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name api-alt.yourdomain.com;
#
#     # SSL certificates
#     ssl_certificate /etc/letsencrypt/live/api-alt.yourdomain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/api-alt.yourdomain.com/privkey.pem;
#
#     # Same configuration as above...
# }
